
```{python}
#| label: set-up
import os
import numpy as np
import pandas as pd
import sklearn as sk
import shap
import os
import sys
from datetime import datetime
from sklearn.ensemble import IsolationForest

sys.path.append(os.getcwd())
sys.path.append(os.path.dirname(os.getcwd()))

import scripts.cons as cons
```

# Data Load

```{python}
#| label: data-load
# load user feature data
user_feat_foath = os.path.join('..', 'data', 'report', 'user_feat_data.csv')
feat_data = pd.read_csv(user_feat_foath)

# load network data
comp_data_fpath=os.path.join('..', 'data', 'report', 'user_comp_data.csv')
comp_data = pd.read_csv(comp_data_fpath)

# join feature and component data
model_data = pd.merge(left=feat_data, right=comp_data, on=['userid', 'transaction_week'], how='left').fillna(0)
```

# Isolation Forests Model

```{python}
#| label: score-data
# train isolation forests
id_cols = ['userid', 'transaction_week']
X_cols = ['E901_size', 'E901_sum', 'E902_size', 'E902_sum', 'n_comps', 'total_comp_size']
train_data = model_data[X_cols].copy()
clf = IsolationForest(random_state=0).fit(train_data)
# score data
score_data = model_data[id_cols+X_cols].copy()
score_data['score'] = clf.decision_function(train_data)
# sort data by most anaomalious
score_data = score_data.sort_values(by='score').head(10)
```

# Anomalious Users

```{python}
score_data.head()
```