
```{python}
#| label: set-up
import os
import numpy as np
import pandas as pd
import sklearn as sk
import shap
import os
import sys
from datetime import datetime
from sklearn.ensemble import IsolationForest

sys.path.append(os.getcwd())
sys.path.append(os.path.dirname(os.getcwd()))

import scripts.cons as cons
```

# Data Load

```{python}
#| label: data-load
# load user feature data
user_feat_foath = os.path.join('..', 'data', 'report', 'user_feat_data.csv')
feat_data = pd.read_csv(user_feat_foath)

# load network data
comp_data_fpath=os.path.join('..', 'data', 'report', 'user_comp_data.csv')
comp_data = pd.read_csv(comp_data_fpath)

# join feature and component data
model_data = pd.merge(left=feat_data, right=comp_data, on=['userid', 'transaction_week'], how='left').fillna(0)
```

# Isolation Forests Model

```{python}
#| label: score-data
def apply_isolation_forests(group):
    """
    """
    # split data
    id_cols = ['userid', 'transaction_week']
    X_cols = ['E901_size', 'E901_sum', 'E902_size', 'E902_sum', 'n_comps', 'total_comp_size']
    train_group = group[X_cols]
    score_group = group[id_cols+X_cols]
    # train isolation forests
    clf = IsolationForest(random_state=0).fit(train_group)
    # score data
    score_group['score'] = clf.decision_function(train_group)
    return score_group

def gen_anomaly_score(group):
    """
    """
    group_sort = group.sort_values('transaction_week')
    group_sort['anomaly_score'] = group_sort['score'].cumsum()
    return group_sort

# apply isolation forests model across each transaction week
score_data = model_data.groupby(by=['transaction_week'], group_keys=False, as_index=False).apply(lambda group: apply_isolation_forests(group))
# generate anomaly score
anomaly_data = score_data.groupby(by=['userid'], group_keys=False, as_index=False).apply(lambda group: gen_anomaly_score(group))
# sort data by most anaomalious
anomaly_data = anomaly_data.sort_values(by=['userid', 'transaction_week']).reset_index(drop=True)
```

# Write Anomalious Data

```{python}
#| label: write-data
# save user anaomly data to disk
score_data_users_fpath=os.path.join('..', 'data', 'report', 'user_anomaly_data.csv')
anomaly_data.to_csv(score_data_users_fpath, index=False)
```